services:



  #-----------------------tracing--------------------------------
  zipkin-service:
    container_name: zipkin-service
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net
    restart: unless-stopped


  #----------------- Databases & DB-EXPORTERS --------------------------------------------------

  #---postgres---
  postgres-service:
    container_name: postgres-service
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PW}
      PGDATA: /data/postgres
      TZ: ${TZ}
      # default db to be created       test: ["CMD-SHELL", "pg_isready -U seif"]
      POSTGRES_DB: product
    healthcheck:
      test: ["CMD-SHELL", "pg_isready  -U ${DB_USER}"]
      interval: 30s
      timeout: 5s
      retries: 5
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - microservices-net
    restart: unless-stopped

  postgres-exporter:
    container_name: postgres-exporter
    image: bitnami/postgres-exporter:latest
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER}:{DB_PW}@localhost:5432/postgres?sslmode=disable"
      POSTGRES_EXPORTER_WEB_LISTEN_ADDRESS: 0.0.0.0:9187
    ports:
      - "9187:9187"
    depends_on:
      postgres-service:
        condition: service_healthy
    restart: unless-stopped


  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - microservices-net
    restart: unless-stopped

  #------mongoDB
  mongodb-service:
    image: mongodb-service
    container_name: mongo_db
    ports:
      - 27017:27017
    volumes:
      - mongo:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${DB_PW}
    networks:
      - microservices-net
    restart: unless-stopped

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=seif
      - ME_CONFIG_MONGODB_ADMINPASSWORD=seif
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_URL="mongodb://mongodb-service:27017"
    depends_on:
      - mongodb-service
    networks:
      - microservices-net
    restart: unless-stopped

  #----Redis-------
  redis-service:
    container_name: redis-service
    image: redis:latest
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes", "--save", "900 1", "--save", "300 10", "--save", "60 10000"]
    volumes:
      - redis_data:/data
    networks:
      - microservices-net
    restart: unless-stopped
  #-----------------Messaging services-------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
    volumes:
      - /zookeeper-data:/var/lib/zookeeper
      - /zookeeper-log:/var/log/zookeeper
    ports:
      - "2181:2181"
    networks:
      - microservices-net
    restart: unless-stopped

  kafka-service:
    container_name: kafka-service
    image: confluentinc/cp-kafka:7.5.0
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-service:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /kafka-data:/var/lib/kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - microservices-net
    restart: unless-stopped

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9010:9010"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
    networks:
      - microservices-net
    restart: unless-stopped

  #-----------------Email-Similators------------------------------------------

  mail-service:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"



  #----------auth-keyclock---------------------------------------
  keycloak-service:
    container_name: keycloak-service
    image: quay.io/keycloak/keycloak:25.0.6
    ports:
      - 9098:8080
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: openstack
    networks:
      - microservices-net
    command:
      - "start-dev"  # to start our server keyCloak

#-------------Docker-Networks & volumes -----------------------------------
networks:
  microservices-net:
    driver: bridge
volumes:
  postgres:
  pgadmin:
  mongo:
  kafka:
  redis_data:
  sonarqube_data:
  sonarqube_extensions:
